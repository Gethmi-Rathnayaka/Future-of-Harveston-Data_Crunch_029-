{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":97455,"databundleVersionId":11590601,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.impute import SimpleImputer\n\n#Load data sets\ntrain_df = pd.read_csv(\"/kaggle/input/data-crunch-round-1/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/data-crunch-round-1/test.csv\")\nsample_sub = pd.read_csv(\"/kaggle/input/data-crunch-round-1/sample_submission.csv\")\n\n#Necessary columns\nnumeric_columns = ['latitude', 'longitude', 'Avg_Temperature', 'Avg_Feels_Like_Temperature', 'Temperature_Range',\n                   'Feels_Like_Temperature_Range', 'Radiation', 'Rain_Amount', 'Rain_Duration', 'Wind_Speed',\n                   'Wind_Direction', 'Evapotranspiration']\ncategorical_columns = ['kingdom']\n\ndef ensure_columns(df, columns):\n    missing_cols = [col for col in columns if col not in df.columns]\n    for col in missing_cols:\n        df[col] = np.nan\n\nensure_columns(train_df, numeric_columns + categorical_columns)\nensure_columns(test_df, numeric_columns + categorical_columns)\n\n#Missing values\ntrain_df[numeric_columns] = train_df[numeric_columns].apply(lambda x: x.fillna(x.median()))\ntest_df[numeric_columns] = test_df[numeric_columns].apply(lambda x: x.fillna(train_df[x.name].median()))\n\nfor col in categorical_columns:\n    mode_value = train_df[col].mode()[0]\n    train_df[col].fillna(mode_value, inplace=True)\n    test_df[col].fillna(mode_value, inplace=True)\n\n#Function to handle 3-digit year format\ndef parse_3_digit_year(row):\n    year = int(row['Year'])\n    month = int(row['Month'])\n    day = int(row['Day'])\n\n    if year < 1000:  \n        year = 1000 + year  \n\n    if year < 1900 or year > 2100: \n        year = 2000  \n    \n    return f\"{year:04d}-{month:02d}-{day:02d}\"\n\nfor df in [train_df, test_df]:\n    if all(col in df.columns for col in ['Year', 'Month', 'Day']):\n        df['date'] = df.apply(parse_3_digit_year, axis=1)\n        try:\n            df['date'] = pd.to_datetime(df['date'])\n        except Exception as e:\n            print(f\"Error in date conversion: {e}\")\n        df.drop(columns=['Year', 'Month', 'Day'], inplace=True)\n        df['day_of_week'] = df['date'].dt.dayofweek\n        df['month'] = df['date'].dt.month\n        df['year'] = df['date'].dt.year\n        df.drop(columns=['date'], inplace=True)\n\n#Target and feature columns\ntarget_columns = ['Avg_Temperature', 'Radiation', 'Rain_Amount', 'Wind_Speed', 'Wind_Direction']\nfeature_columns = [col for col in train_df.columns if col not in ['ID'] + target_columns]\n\n#Prepare data\nexisting_target_columns = [col for col in target_columns if col in train_df.columns]\nX_train = train_df[feature_columns]\ny_train = train_df[existing_target_columns]\nX_test = test_df.drop(columns=['ID'], errors='ignore')\n\nX_train = pd.get_dummies(X_train, drop_first=True)\nX_test = pd.get_dummies(X_test, drop_first=True)\nX_test = X_test.reindex(columns=X_train.columns, fill_value=0)\n\n#Imputation\nimputer = SimpleImputer(strategy=\"median\")\nX_train = pd.DataFrame(imputer.fit_transform(X_train), columns=X_train.columns)\nX_test = pd.DataFrame(imputer.transform(X_test), columns=X_test.columns)\n\nX_train_small, X_val, y_train_small, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n\n#Model training\nrf = RandomForestRegressor(n_estimators=100, random_state=42)\nmulti_target_model = MultiOutputRegressor(rf)\nmulti_target_model.fit(X_train_small, y_train_small)\n\ny_val_pred = multi_target_model.predict(X_val)\nmae = mean_absolute_error(y_val, y_val_pred)\nprint(f\"Validation Mean Absolute Error: {mae}\")\n\nmulti_target_model.fit(X_train, y_train)\n\ny_test_pred = multi_target_model.predict(X_test)\ny_test_pred_df = pd.DataFrame(y_test_pred, columns=existing_target_columns)\n\nsubmission = test_df[['ID']].copy() if 'ID' in test_df.columns else pd.DataFrame()\nfor col in existing_target_columns:\n    submission[col] = y_test_pred_df[col]\nsubmission.to_csv('/kaggle/working/submission.csv', index=False)\nprint(\"Submission Preview:\\n\", submission.head())\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-02T11:49:03.568267Z","iopub.execute_input":"2025-04-02T11:49:03.568557Z","iopub.status.idle":"2025-04-02T11:58:14.689835Z","shell.execute_reply.started":"2025-04-02T11:49:03.568531Z","shell.execute_reply":"2025-04-02T11:58:14.688681Z"}},"outputs":[],"execution_count":null}]}