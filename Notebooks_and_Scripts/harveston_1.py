{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":97455,"databundleVersionId":11590601,"isSourceIdPinned":false,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nimport pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import LabelEncoder\n\ndef smape(y_true, y_pred):\n    return 100 * np.mean(2 * np.abs(y_pred - y_true) / (np.abs(y_true) + np.abs(y_pred)))\n\n#Load data sets\ntrain = pd.read_csv(\"/kaggle/input/data-crunch-round-1/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/data-crunch-round-1/test.csv\")\nsample_sub = pd.read_csv(\"/kaggle/input/data-crunch-round-1/sample_submission.csv\")\n\n\ndef preprocess(df):\n    df.loc[:, \"Year\"] = df[\"Year\"].apply(lambda x: x + 2000 if x < 1000 else x)\n    df[\"Date\"] = pd.to_datetime(df[[\"Year\", \"Month\", \"Day\"]], errors='coerce')\n    df = df.sort_values(\"Date\")\n    df.drop(columns=[\"Year\", \"Month\", \"Day\"], inplace=True)\n    \n    \n    if \"kingdom\" in df.columns:\n        encoder = LabelEncoder()\n        df[\"kingdom\"] = encoder.fit_transform(df[\"kingdom\"])\n    \n    return df\n\ntrain = preprocess(train)\ntest = preprocess(test)\n\n#Feature Engineering\nif \"Avg_Temperature\" in train.columns:\n    train[\"Temp_Lag1\"] = train[\"Avg_Temperature\"].shift(1)\nif \"Radiation\" in train.columns:\n    train[\"Radiation_Lag1\"] = train[\"Radiation\"].shift(1)\ntrain.bfill(inplace=True)\n\n#Target columns\ntargets = [\"Avg_Temperature\", \"Radiation\", \"Rain_Amount\", \"Wind_Speed\", \"Wind_Direction\"]\nfeatures = [col for col in train.columns if col not in [\"ID\", \"Date\"] + targets]\n\navailable_features = [col for col in features if col in test.columns]\nX_train, X_val, y_train, y_val = train_test_split(train[available_features], train[targets], test_size=0.2, random_state=42)\n\nmodels = {}\npredictions = {}\n\nfor target in targets:\n    model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, random_state=42, enable_categorical=True)\n    model.fit(X_train, y_train[target])\n    y_pred = model.predict(X_val)\n    print(f\"sMAPE for {target}: {smape(y_val[target], y_pred):.2f}%\")\n    models[target] = model\n    if set(available_features).issubset(test.columns):\n        predictions[target] = model.predict(test[available_features])\n    else:\n        predictions[target] = np.zeros(len(test))\n\nsubmission = test[[\"ID\"].copy()]\nfor target in targets:\n    submission[target] = predictions[target]\n\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file saved!\")","metadata":{"_uuid":"3b13bcb9-8975-492a-aea2-7daaf070521f","_cell_guid":"aa1fea87-3d12-4333-8d86-56221db46843","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}